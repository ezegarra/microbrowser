Aspectj doesn't catch all events in spring framework? spring aspectj AspectJ doesn't work well with classes in the Spring Web MVC framework. Read the bottom of the "Open for extension..." box on the right side of the page Instead, take a look at the HandlerInterceptor interface. The new Spring MVC Annotations may work as well since then the Controller classes are all POJOs, but I haven't tried it myself. Is this as simple as spelling? or are there just typos in the question? Sometimes you write rebuildThumbnail and sometimes you write rebildThumbnail The methods you are trying to override with advice are not final methods in the MVC framework, so whilst bpapas answer is useful, my understanding is that this is not the problem in this case. However, do make sure that the rebuildThumbnail controller action is not final @bpapas: please correct me if i'm wrong. The programmer's own controller action is what he is trying to override. Looking at the MultiActionController source (and its parents') the only finalised method potentially in the stack is MultiActionController.invokeNamedMethod, although i'm not 100% sure if this would be in the stack at that time or not. Would having a finalised method higher up the stack cause a problem addding AOP advice to a method further down? The basic setup looks ok. The syntax can be simplified slightly by not defining an in-place pointcut and just specifying the method to which the after-advice should be applied. (The named pointcuts for methods are automatically created for you.) e.g. @After( "com.example.bg.web.controllers.assets.AssetAddController.handleRequest()" )
public void afterHandleRequest() {
    log.info( "test111" );
}

@After( "com.example.bg.web.controllers.assets.AssetThumbnailRebuildController.rebuildThumbnail()" )   
public void afterRebuildThumbnail() {
    log.info( "test222" );
}
 As long as the rebuildThumbnail method is not final, and the method name and class are correct. I don't see why this won't work. see http://static.springframework.org/spring/docs/2.0.x/reference/aop.html Your breakpoints aren't being hit because you are using Spring's AOP Proxies. See understanding-aop-proxies for a description of how AOP Proxies are special. Basically, the MVC framework is going to call the handleRequest method on your controller's proxy (which for example the MultiActionController you're using as a base class implements), this method will then make an "internal" call to its rebuildThumbnail method, but this won't go through the proxy and thus won't pick up any aspects. (This has nothing to do with the methods being final.) To achieve what you want, investigate using "real" AOP via load time weaving (which Spring supports very nicely).