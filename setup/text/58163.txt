When can/should you go whole hog with the ORM approach? hibernate architecture orm Hibernate makes more sense when your application works on object graphs, which are persisted in the RDBMS. Instead, if your application logic works on a 2-D matrix of data, fetching those via direct JDBC works better. Although Hibernate is written on top of JDBC, it has capabilities which might be non-trivial to implement in JDBC. For eg: Say, the user views a row in the UI and changes some of the values and you want to fire an update query for only those columns that did indeed change. To avoid getting into deadlocks you need to maintain a global order for SQLs in a transaction. Getting this right JDBC might not be easy Easily setting up optimistic locking. When you use JDBC, you need to remember to have this in every update query. Batch updates, lazy materialization of collections etc might also be non-trivial to implement in JDBC. (I say "might be non-trivial", because it of course can be done - and you might be a super hacker:) Hibernate lets you fire your own SQL queries also, in case you need to. Hope this helps you to decide. PS: Keeping the Session open on a remote desktop client and running into trouble is really not Hibernate's problem - you would run into the same issue if you keep the Connection to the DB open for long.