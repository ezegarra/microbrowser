Is Java relevant in the game industry? web-applications in mobile there is a lot of market share to eat. For the game industry I think it would be important to learn a graphics API. I personally know OpenGL: http://www.opengl.org/ and would recommend it. OpenGL bindings are available to C/C++, python, and Java. I would bet that most game industries are coding in C/C++, but I am no expert. C++ bindings - http://www.nigels.com/glt/ python bindings - http://pyopengl.sourceforge.net/ Java bindings - https://jogl.dev.java.net/ Also python has a module pygame that is specifically for game development, check out: http://www.pygame.org/news.html, it's not the most advanced graphics engine, but I have seen some pretty good games be developed in it. It's not a huge "everyone knows your name" market, but it is there, sure, and you can make some good money doing it. Certainly the mobile market is huge for Java, but it can also lead you into online "mom" games -- applets that let you play cards or chess or boggle online kind of thing. There's also a few innovators out there -- Puzzle Pirates, for example, is a java based MMORPG with a puzzle "mom" feel to it, and it's pretty popular. I'd recommend checking out Three Rings: here (look at the Game Gardens for more info on their code) However, if you're interested in more "serious" games you'll of course need more than java -- your C skills should help you there, I would think. I'm not in the game industry atm, but I've worked with games in Java in the past, and I think it can be done well, as long as you're not doing something really hardware intensive that needs to be at all fast. :) My final year team project at university was a suite of games for teaching music theory which we choose to write in Java. We spent a lot of time working out niggling speed issues, which seemed to vary greatly from machine to machine. The results were interesting though and Java is definitely capable of producing a playable game. However, Java just isn't fast enough and there aren't enough viable engines around yet for the game industry to embrace fully and the relevant API's (3D especially) can be quite intimidating if your background is not in mathematics and/or complex OO design. However, the mobile market for Java games is, as @CiNN says, very much a growth industry. I'd recommend taking a look at some of the open source C++ engines that are out there, and focussing on that. If you are hell bent on attacking Java for games I recommend this book, it'll give you general concepts of how games are designed including very simple AI and 3D animation from code: Cheers To impress a potential employer, demonstrate that you have a deep knowledge of whatever language you choose as well as game-related algorithms. For an example of the latter, make a game where you have to implement a complex path-finding algorithm. Perhaps characters are moving in real-time but so are obstacles. Remember that in real game development your job is in things like algorithms and speedy engines -- art and music and even storyboarding are done by others. Here's more from a friend of mine who's been in the industry since 1994. The programming language doesn't matter nearly as much as your thoughtfulness, insight, and energy. P.S. Publishing any sort of game (even without fancy graphics) and having a few users will be impressive because it shows you can complete projects. One of the best games for me is Clearview RC, so on a sample of 1, I'd say yes. Mr SVK Systems probably makes a tidy sum out of it. Having a portfolio of games you can demonstrate is definitely a good thing. It doesn't matter so much whether those games are Java or C++, so long as they demonstrate your ideas and abilities. However I think you should set your expectations that if you make it into in the industry, you probably won't be using Java. Casual web-based games have moved away from Java to Flash, because a considerably higher percentage of casual web surfers have Flash installed than have a JRE. Console and PC games do not use Java to any extent. They are primarily C++ right now. High end smartphones (Symbian, Windows Mobile, iPhone, etc) have native SDKs, and if they support Java at all tend to discourage its use. Blackberry is Java based, but there are relatively few games for the Blackberry. I'd have to speculate there is not much demand for games on that device. The one place where Java is commonly used for games is in low end mobile phones. This has not been a terribly successful category, only a few companies have made money. There are two problems with this space, so far as I can tell: * write-once-run-anywhere never worked out. The QA and testing load to support a reasonable selection of devices is demanding, and never-ending since new phones come out all the time. * To distribute your game you need a business relationship with the wireless carrier, and they demand a 50% (or more) cut. One last thing: the games industry is famous for programmer burnout. You should search Google for stories about developers at Electronic Arts. Games nowadays are extraordinarily large projects which must meet a particular deadline to have a chance at making their sales targets, and they ratchet up the hours as needed to meet that deadline. Developer burnout is handled via the never-ending supply of young developers enamored with developing games for a living, i.e. replace burned out engineers with fresh ones. Make sure you know what you're getting into. The MMORG Runescape is written in Java, along with Jagex's companion project FunOrb. Both seem to be quite successful. I find it kind of funny that nobody mentioned Minecraft--arguably the most successful game last year. Independently created and published, the creator has earned upwards of 10 million dollars at this point and has started his own company. The entire core system was initially written by one person in Java (Using a higher level language allows you to be more productive, Java is a good choice because it doesn't sacrifice speed to do so). It has amazingly fast/smooth graphics and everything you'd expect in a modern independent game. I also run a Minecraft server on a tiny/old laptop in a 300mb VM. It manages up to 10 players each in different areas of the map at the same time without significantly changing the server load. The best part? The same jar file runs on Mac, PC and Linux. I run my server on linux and sometimes run a second server on my Mac. People I personally know are split pretty evenly between PC and non-PC (Mac+Linux) clients. Perhaps Java isn't currently known terribly well for game development, but I think as developers learn to build better Java code it will become a more well-known alternative. The fact that Android code is written in Java doesn't hurt either. If you like Java, I'd say stick with it.