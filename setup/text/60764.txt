How should I load Jars dynamically at runtime? jar classloader I found this solution a while back but it's so hackish I'm a little embarrassed to post it here, as it uses reflection to bypass encapsulation. But... It works flawlessly. public class ClassPathHack {
    private static final Class[] parameters = new Class[] {URL.class};

    public static void addFile(String s) throws IOException
    {
        File f = new File(s);
        addFile(f);
    }

    public static void addFile(File f) throws IOException
    {
        addURL(f.toURI().toURL());
    }

    public static void addURL(URL u) throws IOException
    {
        URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();
        Class sysclass = URLClassLoader.class;

        try {
            Method method = sysclass.getDeclaredMethod("addURL", parameters);
            method.setAccessible(true);
            method.invoke(sysloader, new Object[] {u});
        } catch (Throwable t) {
            t.printStackTrace();
            throw new IOException("Error, could not add URL to system classloader");
        }

    }
}
 You should take a look at OSGi, e.g. implemented in the Eclipse Platform. It does exactly that. You can install, uninstall, start and stop so called bundles, which are effectively JAR files. But it does a little more, as it offers e.g. services that can be dynamically discovered in JAR files at runtime. Or see the specification for the Java Module System. The reason it's hard is security. Classloaders are meant to be immutable; you shouldn't be able to willy-nilly add classes to it at runtime. I'm actually very surprised that works with the system classloader. Here's how you do it making your own child classloader: URLClassLoader child = new URLClassLoader (myJar.toURL(), this.getClass().getClassLoader());
Class classToLoad = Class.forName ("com.MyClass", true, child);
Method method = classToLoad.getDeclaredMethod ("myMethod");
Object instance = classToLoad.newInstance ();
Object result = method.invoke (instance);
 Painful, but there it is. The best I've found is org.apache.xbean.classloader.JarFileClassLoader which is part of the XBean project. Here's a short method I've used in the past, to create a class loader from all the lib files in a specific directory public void initialize(String libDir) throws Exception {
    File dependencyDirectory = new File(libDir);
    File[] files = dependencyDirectory.listFiles();
    ArrayList<URL> urls = new ArrayList<URL>();
    for (int i = 0; i < files.length; i++) {
        if (files[i].getName().endsWith(".jar")) {
        urls.add(files[i].toURL());
        //urls.add(files[i].toURI().toURL());
        }
    }
    classLoader = new JarFileClassLoader("Scheduler CL" + System.currentTimeMillis(), 
        urls.toArray(new URL[urls.size()]), 
        GFClassLoader.class.getClassLoader());
}
 Then to use the classloader, just do: classLoader.loadClass(name);
 How about the JCL class loader framework? I have to admit, I haven't used it, but it looks promising. usage example: JarClassLoader jcl = new JarClassLoader();  
jcl.add("myjar.jar"); //Load jar file  
jcl.add(new URL("http://myserver.com/myjar.jar")); //Load jar from a URL  
jcl.add(new FileInputStream("myotherjar.jar")); //Load jar file from stream  
jcl.add("myclassfolder/"); //Load class folder  
jcl.add("myjarlib/"); //Recursively load all jar files in the folder/sub-folder(s)  

JclObjectFactory factory = JclObjectFactory.getInstance();  

//Create object of loaded class  
Object obj = factory.create(jcl,"mypackage.MyClass");
 Here is a version that is not deprecated. I modified the original to remove the deprecated functionality. /*
 * Created on Oct 6, 2004
 */
package tools;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;

/**
 * Useful class for dynamically changing the classpath, adding classes during runtime. 
 */
public class ClasspathHacker {
    /**
     * Parameters of the method to add an URL to the System classes. 
     */
    private static final Class<?>[] parameters = new Class[]{URL.class};

    /**
     * Adds a file to the classpath.
     * @param s a String pointing to the file
     * @throws IOException
     */
    public static void addFile(String s) throws IOException {
        File f = new File(s);
        addFile(f);
    }

    /**
     * Adds a file to the classpath
     * @param f the file to be added
     * @throws IOException
     */
    public static void addFile(File f) throws IOException {
        addURL(f.toURI().toURL());
    }

    /**
     * Adds the content pointed by the URL to the classpath.
     * @param u the URL pointing to the content to be added
     * @throws IOException
     */
    public static void addURL(URL u) throws IOException {
        URLClassLoader sysloader = (URLClassLoader)ClassLoader.getSystemClassLoader();
        Class<?> sysclass = URLClassLoader.class;
        try {
            Method method = sysclass.getDeclaredMethod("addURL",parameters);
            method.setAccessible(true);
            method.invoke(sysloader,new Object[]{ u }); 
        } catch (Throwable t) {
            t.printStackTrace();
            throw new IOException("Error, could not add URL to system classloader");
        }        
    }

    public static void main(String args[]) throws IOException, SecurityException, ClassNotFoundException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException{
        addFile("C:\\dynamicloading.jar");
        Constructor<?> cs = ClassLoader.getSystemClassLoader().loadClass("test.DymamicLoadingTest").getConstructor(String.class);
        DymamicLoadingTest instance = (DymamicLoadingTest)cs.newInstance();
        instance.test();
    }
}
 I personally find that java.util.ServiceLoader does the job pretty well. You can get an example here. The easiest way to do this is to set the required libraries in the MANIFEST.MF file in the JAR file and copy the files to a folder. E.g.: Manifest-Version: 1.0 Class-Path: . DataModeler_lib/xxx.jar DataModeler_lib/mx_poi.jar Main-Class: DataModelerApp I had to do this in production - I require the loaded jar to be in the system class loader - and have written this: (acknowledge @Allain Lalonde): I first check that the library has not already been loaded, then use reflection to circumvent the fact that addURL is not a public method on the class loader object. I also don't like to catch Throwable as that can interfere with the workings of the JVM. public static synchronized void loadLibrary(java.io.File jar) throws myException
{        
    try {                    
        /*We are using reflection here to circumvent encapsulation; addURL is not public*/
        java.net.URLClassLoader loader = (java.net.URLClassLoader)ClassLoader.getSystemClassLoader();                        
        java.net.URL url = jar.toURI().toURL();
        /*Disallow if already loaded*/
        for (java.net.URL it : java.util.Arrays.asList(loader.getURLs())){
            if (it.equals(url)){
                throw new myException("library " + jar.toString() + " is already loaded");
            }                
        }                 
        java.lang.reflect.Method method = java.net.URLClassLoader.class.getDeclaredMethod(
            "addURL", 
            new Class[]{java.net.URL.class}
        );
        method.setAccessible(true); /*promote the method to public access*/
        method.invoke(loader, new Object[]{url});
    } catch (final NoSuchMethodException | 
        java.lang.IllegalAccessException | 
        java.net.MalformedURLException | 
        java.lang.reflect.InvocationTargetException e){
        throw new myException(e.getMessage());
    }        
}
 If you are working on Android, the following code works: String jarFile = "path/to/jarfile.jar";
DexClassLoader classLoader = new DexClassLoader(jarFile, "/data/data/" + context.getPackageName() + "/", null, getClass().getClassLoader());
Class<?> myClass = classLoader.loadClass("MyClass");