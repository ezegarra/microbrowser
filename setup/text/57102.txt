Embedded java databases database embedded-database I am a big fan of DB4O for both .Net and Java. Performance has become much better since the early releases. The licensing model isnt too bad, either. I particularly like the options available for querying your objects. Query by example is very powerful and easy to get used to. We use HSQLDB in production as a "no-configuration" option for our application. It allows people to trial without the hassle of setting up a real database. However we do not support it for normal use. The reasons are several: Slows down proportionally to the size of the data. Difficult to access outside of our app (e.g. for custom reports). Transactions / disk-sync is difficult to get right, so it's easy to lose data. For at least (2) and (3), there are ways around it but it's difficult; it's much easier to e.g. install MySQL. Java DB (Sun's distribution of Apache Derby) now ships in JDK 6! I've been wanted to do something like Jason Cohen and have been thinking this looks like the easiest way being in the JDK distro (which of last week is now a requirement for my app). Or maybe I am just lazy that way. I use Apache Derby for pretty much all of my embedded database needs. You can also use Sun's Java DB that is based on Derby but the latest version of Derby is much newer. It supports a lot of options that commercial, native databases support but is much smaller and easier to embed. I've had some database tables with more than a million records with no issues. I used to use HSQLDB and Hypersonic about 3 years ago. It has some major performance issues at the time and I switch to Derby from it because of those issues. Derby has been solid even when it was in incubator at Apache. I have used Derby and i really hate it's data type conversion functions, especially date/time functions. (Number Type)<--> Varchar conversion it's a pain. So that if you plan use data type conversions in your DB statements consider the use of othe embedded DB, i learn it too late. Latest Derby Version data type conversions neo4j is: an embedded, disk-based, fully transactional Java persistence engine that stores data structured in graphs rather than in tables I haven't had a chance to try it yet - but it looks very promising. Note this is not an SQL database - your object graph is persisted for you - so it might not be appropriate for your existing app. H2, derby but it really depends on what you're using it for. I'd go with H2, the performance is meant to much better than Derby. Read http://www.h2database.com/html/performance.html for more info. I guess I'm a little late (a lot late;-)) to this post, but I'd like to add Perst, an open source, object-oriented embedded database for Java &.NET. for your consideration. Perst is an open source / dual license embedded database for Java. The distribution is compatible with Google's Android platform, and also includes Perst Lite for Java ME. We've even built an Android benchmark and produced a whitepaper on the subject...you can take a look here: http://www.mcobject.com/index.cfm?fuseaction=download&pageid=581&sectionid=133 All the best, Chris If I am correct H2 is from the same guys who wrote HSQLDB. Its a lot better if you trust the benchmarks on their site. Also, there is some notion that sun community jumped too quickly into Derby. I needed to use Java embedded database in one of my projects and I did lot of research understanding pros and cons of each database. I wrote a blog listing pros and cons of popular embedded java databases (H2, HSQLDB, Derby, ObjectDB, Neo4j, OrientDB), you can have a look at it. I chose H2 as I thought it best suited my requirements. Link for the blog: http://sayrohan.blogspot.in/2012/12/choosing-light-weight-java-database.html Hope it helps!