How to Round Up The Result Of Integer Division c# math You'll want to do floating point division, and then use the ceiling function, to round up the value to the next integer. Another alternative is to use the mod() function (or '%'). If there is a non-zero remainder then increment the integer result of the division. This should give you what you want. You will definitely want x items divided by y items per page, the problem is when uneven numbers come up, so if there is a partial page we also want to add one page. int x = number_of_items;
int y = items_per_page;

// with out library
int pages = x/y + (x % y > 0 ? 1 : 0)

// with library
int pages = (int)Math.Ceiling((double)x / (double)y);
 For C# the solution is to cast the values to a double (as Math.Ceiling takes a double): int nPages = Math.Ceiling((double)nItems / (double)nItemsPerPage);
 In java you should do the same with Math.ceil(). Found an elegant solution: int pageCount = (records + recordsPerPage - 1) / recordsPerPage;
 Source: Number Conversion, Roland Backhouse, 2001 The integer math solution that Ian provided is nice, but suffers from an integer overflow bug. Assuming the variables are all int, the solution could be rewritten to use long math and avoid the bug: int pageCount = (-1L + records + recordsPerPage) / recordsPerPage; If records is a long, the bug remains. The modulus solution does not have the bug. Converting to floating point and back seems like a huge waste of time at the CPU level. Ian Nelson's solution: int pageCount = (records + recordsPerPage - 1) / recordsPerPage;
 Can be simplified to: int pageCount = (records - 1) / recordsPerPage + 1;
 AFAICS, this doesn't have the overflow bug that Brandon DuRette pointed out, and because it only uses it once, you don't need to store the recordsPerPage specially if it comes from an expensive function to fetch the value from a config file or something. I.e. this might be inefficient, if config.fetch_value used a database lookup or something: int pageCount = (records + config.fetch_value('records per page') - 1) / config.fetch_value('records per page');
 This creates a variable you don't really need, which probably has (minor) memory implications and is just too much typing: int recordsPerPage = config.fetch_value('records per page')
int pageCount = (records + recordsPerPage - 1) / recordsPerPage;
 This is all one line, and only fetches the data once: int pageCount = (records - 1) / config.fetch_value('records per page') + 1;
 For records == 0, rjmunro's solution gives 1. The correct solution is 0. That said, if you know that records > 0 (and I'm sure we've all assumed recordsPerPage > 0), then rjmunro solution gives correct results and does not have any of the overflow issues. int pageCount = 0;
if (records > 0)
{
    pageCount = (((records - 1) / recordsPerPage) + 1);
}
// no else required
 All the integer math solutions are going to be more efficient than any of the floating point solutions. Alternative to remove branching in testing for zero: int pageCount = (records + recordsPerPage - 1) / recordsPerPage * (records != 0);
 Not sure if this will work in C#, should do in C/C++. A generic method, whose result you can iterate over may be of interest: public static Object[][] chunk(Object[] src, int chunkSize) {

    int overflow = src.length%chunkSize;
    int numChunks = (src.length/chunkSize) + (overflow>0?1:0);
    Object[][] dest = new Object[numChunks][];      
    for (int i=0; i<numChunks; i++) {
        dest[i] = new Object[ (i<numChunks-1 || overflow==0) ? chunkSize : overflow ];
        System.arraycopy(src, i*chunkSize, dest[i], 0, dest[i].length); 
    }
    return dest;
}
 A variant of Nick Berardi's answer that avoids a branch: int q = records / recordsPerPage, r = records % recordsPerPage;
int pageCount = q - (-r >> (Integer.SIZE - 1));
 Note: (-r >> (Integer.SIZE - 1)) consists of the sign bit of r, repeated 32 times (thanks to sign extension of the >> operator.) This evaluates to 0 if r is zero or negative, -1 if r is positive. So subtracting it from q has the effect of adding 1 if records % recordsPerPage > 0. I had a similar need where I needed to convert Minutes to hours & minutes. What I used was: int hrs = 0; int mins = 0;

float tm = totalmins;

if ( tm > 60 ) ( hrs = (int) (tm / 60);

mins = (int) (tm - (hrs * 60));

System.out.println("Total time in Hours & Minutes = " + hrs + ":" + mins);
 The following should do rounding better than the above solutions, but at the expense of performance (due to floating point calculation of 0.5*rctDenominator): uint64_t integerDivide( const uint64_t& rctNumerator, const uint64_t& rctDenominator )
{
  // Ensure .5 upwards is rounded up (otherwise integer division just truncates - ie gives no remainder)
  return (rctDenominator == 0) ? 0 : (rctNumerator + (int)(0.5*rctDenominator)) / rctDenominator;
}
 I do the following, handles any overflows: var totalPages = totalResults.IsDivisble(recordsperpage) ? totalResults/(recordsperpage) : totalResults/(recordsperpage) + 1;
 And use this extension for if there's 0 results: public static bool IsDivisble(this int x, int n)
{
           return (x%n) == 0;
}
 Also, for the current page number (wasn't asked but could be useful): var currentPage = (int) Math.Ceiling(recordsperpage/(double) recordsperpage) + 1;