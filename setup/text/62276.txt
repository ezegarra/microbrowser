java package cycle detection: how to find the specific classes involved? class dependencies packages software-tools One tool which does this is the software tomograph http://www.software-tomography.com/ it is commercial and the ui sucks :o There is also structure 101 which should do this http://www.headwaysoftware.com/ And you can use the open source tool CAP which is an eclipse plugin. http://cap.xore.de/ CAP has a graphical package view which will show you the lines to the classes so after some clicks (depending on the size of the circle) you will find the culprit. Findbugs can detect circular class dependencies, and has an eclipse plugin too. http://findbugs.sourceforge.net/ There are some commercial tools: Structure101 & Lattix which can be used for this purpose. a first possible answer is... not pretty. But it does begin to do what I am after. (a better solution is presented below) Dependency Finder! Download it, unzip it. Not the most modern or active project ever, but if you edit [Dependency Finder]/bin/DependencyFinder.bat, add its path for DEFAULT_DEPENDENCYFINDER_HOME, set a JAVA_HOME, you can launch it. Then you click on the 'Extract' button (CTRL-E - first button), enter your classes path, and let it scan away. The tricky part is to click exactly the right set of 'programming elements' and 'closures' items, in order to not been swamped by the level of details in the result. Select only 'classes' in the left side ('programming elements') Select only 'classes' in the right side ('closures') add "/javax?./,/org./,/sun./" as exclusion pattern (for both programming elements and closures) Click on the wheels (last button - Compute all - CTRL A) And here you go. Whenever you see '<->', you have got yourself a nice cyclic dependency. (If you select 'features' on the 'closure' side, you can even know what function does trigger the cycle - awesome -) I am ready to test any other suggestions. Well... after testing DepFinder presented above, it turns out it is great for a quick detection of simple dependencies, but it does not scale well with the number of classes... So the REAL ACTUAL ANSWER is: CDA - Class Dependency Analyzer It is fast, up-to-date, easy to use and provides with graphical representation of classes and their circular dependencies. A dream come true ;) You have to create a workset in which you enter only the directory of your classes (.class) (no need to have a complete classpath) The option "Detect circular dependencies - ALT-C" works as advertise and does not take 100% of the CPU for hours to analyze my 468 classes. Note: to refresh a workspace, you need to open it again(!), in order to trigger a new scan of your classes. We use Sonar to detect package cycles. It draws a nice graph of the dependencies and shows which ones go in the wrong direction. You can even navigate to the source where the dependency is used. See http://www.sonarsource.org/fight-back-design-erosion-by-breaking-cycles-with-sonar/ Highwheel detects class and package cycles and reports the source of the dependences down to the class/method/field level indicating the type of the relationship (inheritance, composition, part of a method signature etc). It also breaks large cycles down into their sub-elements which can be understood/tackled individually. https://github.com/hcoles/highwheel The output is html with embedded svg that requires a modern browser.