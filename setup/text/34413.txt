Why am I getting a NoClassDefFoundError in Java? noclassdeffounderror This is caused when there is a class file that your code depends on and it is present at compile time but not found at runtime. Look for differences in your build time and runtime classpaths. I have found that sometimes I get a NoClassDefFound error when code is compiled with an incompatible version of the class found at runtime. The specific instance I recall is with the apache axis library. There were actually 2 versions on my runtime classpath and it was picking up the out of date and incompatible version and not the correct one, causing a NoClassDefFound error. This was in a command line app where I was using a command similar to this. set classpath=%classpath%;axis.jar
 I was able to get it to pick up the proper version by using: set classpath=axis.jar;%classpath%;
 I believe it can also happen if you don't run your java program with the correct syntax. For instance, you have to call your class from the root bin folder with the full package name (ie. my.package.myClass). I'd be more specific if I could but I'm not much of a java guy. I just remember messing this up a few times. While it's possible that this is due to a classpath mismatch between compile-time and run-time, it's not necessarily true. It is important to keep two or three different exceptions strait in our head in this case: java.lang.ClassNotFoundException This exception indicates that the class was not found on the classpath. This indicates that we were trying to load the class definition, and the class did not exist on the classpath. java.lang.NoClassDefFoundError This exception indicates that the JVM looked in its internal class definition data structure for the definition of a class and did not find it. This is different than saying that it could not be loaded from the classpath. Usually this indicates that we previously attempted to load a class from the classpath, but it failed for some reason - now we're trying to use the class again (and thus need to load it, since it failed last time), but we're not even going to try to load it, because we failed loading it earlier (and reasonably suspect that we would fail again). The earlier failure could be a ClassNotFoundException or an ExceptionInInitializerError (indicating a failure in the static initialization block) or any number of other problems. The point is, a NoClassDefFoundError is not necessarily a classpath problem. while running a java application, the JVM looks for the class file inside the classpath variable. If it doesn't find that in that classpath, then it fires the NOClassDefFound Error.