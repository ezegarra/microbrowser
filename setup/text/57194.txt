FTP Timeout on NLST when directory is empty ftp webmethods I am not sure if it was the same problem but I had similar symptoms a while ago using another FTP client in Java (commons.net). The problem turned out to be caused by the active/passive mode of the connection. I am sorry I can't give you more details, that's all I can remember... hope that help. Guillermo Vasconcelos was correct in his answer. There are two FTP modes, Active and Passive. The default FTP mode is active. Active requires the server to connect back to the client on some TCP/IP port. This does not work with firewalls because chances are that this port would be blocked or if you are behind a Router with NAT, not mapped. If you use Passive (PASV) mode instead, you should not get the hang. I'm going to run some new tests with the settings to passive tomorrow when maintenance is done here, but I'm not sure that's the issue. We are able to get a directory listing if there are files or subdirectories in that directory. It only fails when the directory we're NLST-ing on is empty. Would the active/passive difference only manifest for an empty directory, or is there another possibility? I tried this in WebMethods IS Version 6.5 Updates WmPRT_6-5-1_SP1, IS_6-5_SP3. It worked perfectly first time. I turned on debugging on the FTP server (Debian's default ftpd). WebMethods' NLST honours the active/passive parameter passed to it. There's nothing special about the NLST command, nor its correct behaviour with an empty directory -- if LIST works, then so should RETR, STOR and NLST. If NLST works with a non-empty directory, it should work with an empty one. So my guess is that either: Your version of WM has a bug mine doesn't Your FTP server has a bug mine doesn't There's a wacky protocol-aware firewall in your system that doesn't like FTP data sockets with no data in them. Firewall vendors are a bit wayward when it comes to FTP... When testing with other clients, make sure it's from the same machine on which WebMethods Integration Server is running. Just for the record, here's what should happen for an active NLST client opens a listening socket, and sends a PORT command with that socket's details client sends NLST command server connects to client's listening socket (this is the data socket) server transmits listing over data socket (in this case, zero bytes) server closes data socket ... and in passive mode client sends PASV command server opens a listening socket, and replies with PASV response containing its details client connects to listening socket (this is the data socket) client sends NLST command server transmits listing over data socket (zero bytes again) server closes data socket FTP requires that both the specified port and the one above it be opened through the firewall. When I had problems with webMethods timing out, it was because the firewall did not have the return port open. Howard