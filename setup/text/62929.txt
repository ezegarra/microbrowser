java.net.SocketException: Connection reset sockets networking connection socketexception Whenever I have had odd issues like this, I usually sit down with a tool like WireShark and look at the raw data being passed back and forth. You might be surprised where things are being disconnected, and you are only being notified when you try and read. A "connection reset" does not indicate that the partner closed the connection, but that it abruptly killed the connection without calling close, often by the process crashing. If the partner deliberately closes the connection, you won't get an exception from the Socket input stream, you'll just read a -1 that signals EOF. Given the logs in your case, I'd give any intervening firewalls a close look. They're a close runner-up for most likely to cause "connection reset" errors in my experience. Update in response to additional information: Okay, it might be related… if there are any delays, a SocketTimeoutException should be raised on the side that's reading. If this exception isn't handled properly, that application could terminate the socket abruptly, causing a "connection reset" SocketException on the side that's writing. So, in your case, what does the client do if a SocketTimeoutException is thrown in a call to read? Is it possible that it exits, or at least loses its reference to the Socket so that it is garbage-collected without calling close? There are several possible causes. The other end has deliberately reset the connection, in a way which I will not document here. It is rare, and generally incorrect, for application software to do this, but it is not unknown for commercial software. More commonly, it is caused by writing to a connection that the other end has already closed normally. In other words an application protocol error. In Windows, 'software caused connection abort', which is not the same as 'connection reset', is caused by network problems sending from your end. There's a Microsoft knowledge base article about this. I had the same error. I found the solution for problem now. The problem was client program was finishing before server read the streams. Embarrassing to say it, but when I had this problem, it was simply a mistake that I was closing the connection before I read all the data. In cases with small strings being returned, it worked, but that was probably due to the whole response was buffered, before I closed it. In cases of longer amounts of text being returned, the exception was thrown, since more then a buffer was coming back. You might check for this oversight. Remember opening a URL is like a file, be sure to close it (release the connection) once it has been fully read. I also had this problem with a Java program trying to send a command on a server via SSH. The problem was with the machine executing the Java code. It didn't have the permission to connect to the remote server. The write() method was doing alright, but the read() method was throwing a java.net.SocketException: Connection reset. I fixed this problem with adding the client SSH key to the remote server known keys.