How to upgrade database schema built with an ORM tool? database orm migration I think your best bet is to use an ORM-tool that includes database migration like SubSonic: http://subsonicproject.com/2-1-pakala/subsonic-using-migrations/ We ended up making update scripts each time we changed the database. So there's a script from version 10 to 11, from 11 to 12, etc.. Then we can run any consecutive set of scripts to skip from some existing version to the new version. We stored the existing version in the database so we could detect this upon startup. Yes this involved database-specific code! One of the main problems with Hibernate! When working with Hibernate, I use an installer class that runs from the command-line and has options for creating database schema, inserting base data, and dynamically updating the database schema using SchemaUpdate. I find it to be extremely useful. It also gives me a place to put one-off scripts that will be run when a new version is launched to, for example, populate a new field in an existing DB table. I don't see why ORM generated schemas are any different to other DB schemas - the problem is the same. Assuming your ORM will spit out a generation script, you can use an external tool to do the diff I've not tried it but google came back with SQLCompare as one option - I'm sure there are others. LiquiBase is an interesting open source library for handling database refactorings (upgrades). I have not used it, but will definitely give it a try on my next project where I need to upgrade a db schema. We hand code SQL update scripts and we tear down the schema and rebuild it applying the update scripts as part of our continuous build process. If any hibernate mappings do not match the schema, the build will fail. This might be helpful: http://shashivelur.com/blog/2008/07/hibernate-db-migration/ DbMaintain can also help here.