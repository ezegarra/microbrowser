Best Practice: Initialize class fields in constructor or at declaration? c# My rules: 1. Don't initialize with the default values in declaration (null, false, 0, 0.0...). 2. Prefer initialization in declaration if you don't have a constructor parameter that changes the value of the field. 3. If the value of the field changes because of a constructor parameter put the initialization in the constructors. 4. Be consistent in your practice. (the most important rule) Assuming the type in your example, definitely prefer to initialize fields in the constructor. The exceptional cases are: Fields in static classes/methods Fields typed as static/final/et al I always think of the field listing at the top of a class as the table of contents (what is contained herein, not how it is used), and the constructor as the introduction. Methods of course are chapters. What if I told you, it depends? I in general initialize everything and do it in a consistent way. Yes it's overly explicit but it's also a little easier to maintain. If we are worried about performance, well then I initialize only what has to be done and place it in the areas it gives the most bang for the buck. In a real time system, I question if I even need the variable or constant at all. And in C++ I often do next to no initialization in either place and move it into an Init() function. Why? Well, in C++ if you're initializing something that can throw an exception during object construction you open yourself to memory leaks. I normally try the constructor to do nothing but getting the dependencies and initializing the related instance members with them. This will make you life easier if you want to unit test your classes. If the value you are going to assign to an instance variable does not get influenced by any of the parameters you are going to pass to you constructor then assign it at declaration time. In C# it doesn't matter. The two code samples you give are utterly equivalent. In the first example the C# compiler (or is it the CLR?) will construct an empty constructor and initialise the variables as if they were in the constructor. If there is already a constructor then any initialisation "above" will be moved into the top of it. In terms of best practice the former is less error prone than the latter as someone could easily add another constructor and forget to chain it. There is a slight performance benefit to setting the value in the declaration. If you set it in the constructor it is actually being set twice (first to the default value, then reset in the ctor). The semantics of C# differs slightly from Java here. In C# assignment in declaration is performed before calling the superclass constructor. In Java it is done immediately after which allows 'this' to be used (particularly useful for anonymous inner classes), and means that the semantics of the two forms really do match. If you can, make the fields final. I think there is one caveat. I once committed such an error: Inside of a derived class, I "initialized at declaration" the fields inherited from an abstract base class. In that instance the polymorphism got really messed up, and the result was that there existed two sets of fields, one is "base" and another is the newly declared ones. The lesson was there is only one correct way to initialize fields in derived classes, which is to do it inside of the constructor.