Tools for converting non-Java into Java source compiler-construction One thing you can try is find a Java bytecode compiler for the language you're talking about (there are JVM compilers for all kinds of languages) and then decompile the bytecode back into Java using a decompiler like Jad. This is fraught with peril. The regenerated code will suck and will probably be unreadable. Google: ANTLR ADA to Java can be done with a find-and-replace! If you just want to use some legacy C/Pascal code, you could also use JNI to call it from Java. If you want to run it in a Java applet or similar constrained environment, and it does not have to be very efficient, you can use NestedVM (which is a MIPS to Java bytecode converter) in conjunction with a gcc cross-compiler that compiles to MIPS). But don't expect to get readably Java code from that. The language conversion is fairly simple, but you will find the libraries are different. This is likely to be most of your work. Any of those tools might help only if your non java code is not huge enough. If its huge non java code and if you want to seriously translate it to java, then few things need to be thought of, its not just hundreds of lines of code, there is a design beneath it, there are few decisions taken by people beneath the code due to which certain problems might have been solved and few things have been working there. and investing time on any good translator won't be worth as it won't exist, it's not just syntax translation from one language to another. If its not so huge code, its better to re write in java, as it has so many APIs packages out of box, it might not be big deal, hiring few interns for this also might help. Source-to-source migrations fall under the umbrella of Program Transformation. Program-Transformation.org tracks a bunch of tools that are useful for language recognition, analysis, and transformation. Here are few that are capable of source-to-source migrations: ASF+SDF Meta-Environment - As noted, there is no new development on this tool. Instead, the developers are focusing on Rascal. Rascal Meta Programming Language Stratego /XT TXL DMS® Software Reengineering Toolkit (commercial) If you spend any time with one of the open source tools, you'll notice that even though they include source-to-source migration as a feature, it's hard to find working examples. I imagine this is because there's no such thing as a one-size-fits-all migration. Each project/team makes unique use of a language and can vary by libraries used, type complexity, idioms, style, etc. It makes sense to define some transformations per migration. This means a project must reach some critical mass before automatic migration is worth the effort. A few related documents: An introduction to Rascal - includes a migration between the toy language Pico and Assembly starting at page 94. Cracking the 500 Language Problem An Experiment in Automatic Conversion of Legacy Java Programs to C# (gated) - uses TXL