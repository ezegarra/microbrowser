How to capture crash logs in Java error-handling crash For handling uncaught exceptions you can provide a new ThreadGroup which provides an implementation of ThreadGroup.uncaughtException(...). You can then catch any uncaught exceptions and handle them appropriately (e.g. send a crash log home). I can't help you on the JNI front, there's probably a way using a native wrapper executable before calling the JVM, but that executable is going to need to know about all the possible JVMs it could be calling and how the indicate crashes and where crash logs are placed etc. Not sure if this is what you needing, but you can also detect if an exception has occurred from within your native code. See http://java.sun.com/javase/6/docs/technotes/guides/jni/spec/functions.html#wp5234 for more info. For simple catch-all handling, you can use the following static method in Thread. From the Javadoc: static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler eh)           Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread. This is a very broad way to deal with errors or unchecked exceptions that may not be caught anywhere else. Side-note: It's better if the code can catch, log and/or recover from exceptions closer to the source of the problem. I would reserve this kind of generalized crash handling for totally unrecoverable situations (i.e. subclasses of java.lang.Error). Try to avoid the possibility of a RuntimeException ever going completely uncaught, since it might be possible--and preferable--for the software to survive that.