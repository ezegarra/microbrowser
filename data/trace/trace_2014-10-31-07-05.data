2014-10-31 07:05:11:0640, setup_loaddata
2014-10-31 07:05:14:0770, diag_itementered, id=29516, type=1
2014-10-31 07:05:14:0820, diag_itemexited, id=29516, type=1
2014-10-31 07:05:14:0820, diag_itementered, id=17373, type=1
2014-10-31 07:05:16:0390, edge_create, Tuple[0,1,0.17029767311279143,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0400, answer_create, 17379
2014-10-31 07:05:16:0400, edge_create, Tuple[1,2,0.004520826020070534,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0400, answer_create, 17389
2014-10-31 07:05:16:0400, edge_create, Tuple[1,3,0.5613623764885528,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0400, answer_create, 17394
2014-10-31 07:05:16:0400, edge_create, Tuple[1,4,0.3670505093405416,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0400, answer_create, 17398
2014-10-31 07:05:16:0410, edge_create, Tuple[1,5,0.3692944205217994,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0410, answer_create, 17426
2014-10-31 07:05:16:0410, edge_create, Tuple[1,6,0.8911755978566817,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0410, answer_create, 17535
2014-10-31 07:05:16:0410, edge_create, Tuple[1,7,0.7548637342354395,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0410, answer_create, 27353
2014-10-31 07:05:16:0410, edge_create, Tuple[1,8,0.2327271686866894,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0410, answer_create, 27791
2014-10-31 07:05:16:0410, edge_create, Tuple[1,9,0.3368682737756621,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0420, answer_create, 12107210
2014-10-31 07:05:16:0420, edge_create, Tuple[1,10,0.7796733286306416,4,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0420, edge_create, Tuple[0,11,0.4812793842247177,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0420, edge_create, Tuple[11,12,0.2769966939953956,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0420, edge_create, Tuple[11,13,0.13664631209016886,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0420, edge_create, Tuple[11,14,0.5763533109704216,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0430, edge_create, Tuple[11,15,0.3062774297793014,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0430, edge_create, Tuple[11,16,0.23907122288993155,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0430, edge_create, Tuple[11,17,0.26380174446677795,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0430, edge_create, Tuple[11,18,0.59177759734623,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0430, edge_create, Tuple[11,19,0.11777259857287337,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0430, edge_create, Tuple[11,20,0.822899994378608,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0440, edge_create, Tuple[11,21,0.8999180662804013,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0440, edge_create, Tuple[11,22,0.9414458226432202,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0440, edge_create, Tuple[11,23,0.7180100641009126,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0440, edge_create, Tuple[11,24,0.7884247337849062,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0440, edge_create, Tuple[11,25,0.796279872051761,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0450, edge_create, Tuple[11,26,0.7032703751272756,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0450, edge_create, Tuple[11,27,0.18264105855493595,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0450, edge_create, Tuple[11,28,0.07548994928170749,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0450, edge_create, Tuple[11,29,0.18210508312528828,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0450, edge_create, Tuple[11,30,0.5440009688090272,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0450, edge_create, Tuple[11,31,0.9697307376538447,1,0.0,1414753511070,1414753511070]
2014-10-31 07:05:16:0470, discussion_open, 17373
2014-10-31 07:05:16:0470, diag_itemclicked, id=17373, type=1
2014-10-31 07:05:16:0470, diag_itemexited, id=17373, type=1
2014-10-31 07:05:18:0540, diag_detail_itementered, id=63206, type=1
2014-10-31 07:05:18:0570, diag_detail_itemexited, id=63206, type=1
2014-10-31 07:05:18:0720, diag_detail_itementered, id=62418, type=1
2014-10-31 07:05:18:0740, diag_detail_itemexited, id=62418, type=1
2014-10-31 07:05:19:0500, diag_detail_itementered, id=0.9697307376538447, type=1
2014-10-31 07:05:19:0530, diag_detail_itemexited, id=0.9697307376538447, type=1
2014-10-31 07:05:21:0130, diag_detail_itementered, id=52874, type=1
2014-10-31 07:05:21:0150, diag_detail_itemexited, id=52874, type=1
2014-10-31 07:05:21:0200, list_mouseentered, type=detailRelatedList, item=62418
2014-10-31 07:05:21:0480, list_mouseexited, type=detailRelatedList
2014-10-31 07:05:21:0700, list_mouseentered, type=detailRelatedList, item=52874
2014-10-31 07:05:22:0290, list_mouseexited, type=detailRelatedList
2014-10-31 07:05:23:0502, list_mouseentered, type=detailAnswersList
2014-10-31 07:05:24:0412, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:05:24:0412, list_itemclicked, type=detailAnswersList, item=3049
2014-10-31 07:05:25:0242, list_mouseexited, type=detailAnswersList
2014-10-31 07:05:26:0722, diag_detail_itementered, id=0.18210508312528828, type=1
2014-10-31 07:05:26:0752, diag_detail_itemexited, id=0.18210508312528828, type=1
2014-10-31 07:05:26:0752, diag_detail_itementered, id=0.7032703751272756, type=1
2014-10-31 07:05:26:0752, diag_detail_itemexited, id=0.7032703751272756, type=1
2014-10-31 07:05:26:0752, diag_detail_itementered, id=0.796279872051761, type=1
2014-10-31 07:05:26:0782, diag_detail_itemexited, id=0.796279872051761, type=1
2014-10-31 07:05:26:0842, diag_detail_itementered, id=-1436942564, type=3
2014-10-31 07:05:27:0784, diag_detail_itemexited, id=-1436942564, type=3
2014-10-31 07:05:29:0534, diag_detail_itementered, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0544, diag_detail_itemexited, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0554, diag_detail_itementered, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0574, diag_detail_itemexited, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0574, diag_detail_itementered, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0584, diag_detail_itemexited, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0634, diag_detail_itementered, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0644, diag_detail_itemexited, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0654, diag_detail_itementered, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0674, diag_detail_itemexited, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0674, diag_detail_itementered, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0694, diag_detail_itemexited, id=0.3670505093405416, type=4
2014-10-31 07:05:29:0714, answer_open, VisualItem[tree.nodes,4,id=17394,type=20,title=,body=<p>I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.)</p>

<pre><code>public void email(String subject, String body) throws Exception {
    String cmd = "open mailto:";        
    cmd += "?subject=" + urlEncode(subject);
    cmd += "&amp;body=" + urlEncode(body);
    Runtime.getRuntime().exec(cmd);
}

private static String urlEncode(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; s.length(); i++) {
        char ch = s.charAt(i);
        if (Character.isLetterOrDigit(ch)) {
            sb.append(ch);
        }
        else {
            sb.append(String.format("%%%02X", (int)ch));
        }
    }
    return sb.toString();
}
</code></pre>

<p>I had to re-implement URLencode because Java's would use <code>+</code> for space and Mail took those literally. Haven't tested on Windows yet.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:05:29:0714, answer_open, VisualItem[tree.nodes,4,id=17394,type=20,title=,body=<p>I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.)</p>

<pre><code>public void email(String subject, String body) throws Exception {
    String cmd = "open mailto:";        
    cmd += "?subject=" + urlEncode(subject);
    cmd += "&amp;body=" + urlEncode(body);
    Runtime.getRuntime().exec(cmd);
}

private static String urlEncode(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; s.length(); i++) {
        char ch = s.charAt(i);
        if (Character.isLetterOrDigit(ch)) {
            sb.append(ch);
        }
        else {
            sb.append(String.format("%%%02X", (int)ch));
        }
    }
    return sb.toString();
}
</code></pre>

<p>I had to re-implement URLencode because Java's would use <code>+</code> for space and Mail took those literally. Haven't tested on Windows yet.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:05:29:0714, diag_detail_itementered, id=17394, type=20
2014-10-31 07:05:31:0624, diag_detail_itemexited, id=17394, type=20
2014-10-31 07:05:31:0704, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:31:0704, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:31:0714, diag_detail_itementered, id=17398, type=20
2014-10-31 07:05:31:0784, diag_detail_itemexited, id=17398, type=20
2014-10-31 07:05:32:0364, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:32:0374, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:32:0374, diag_detail_itementered, id=17398, type=20
2014-10-31 07:05:33:0044, diag_detail_itemexited, id=17398, type=20
2014-10-31 07:05:34:0974, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:34:0974, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:34:0984, diag_detail_itementered, id=27353, type=20
2014-10-31 07:05:36:0034, diag_detail_itemexited, id=27353, type=20
2014-10-31 07:05:37:0904, answer_open, VisualItem[tree.nodes,10,id=12107210,type=20,title=,body=<p>You may use this...</p>

<pre><code>main(string[] args){    
String forUri = String.format("mailto:?subject=%s&amp;body=%s",  urlEncode(sub), urlEncode(mailBody));
                        Desktop.getDesktop().mail(new URI(forUri));
}

private static final String urlEncode(String str) {
        try {
            return URLEncoder.encode(str, "UTF-8").replace("+", "%20");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
</code></pre>

<p>Also for formatting read <a href="http://www.2ality.com/2010/12/simple-way-of-sending-emails-in-java.html" rel="nofollow">A simple way of sending emails in Java: mail-to links</a></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:05:37:0904, answer_open, VisualItem[tree.nodes,10,id=12107210,type=20,title=,body=<p>You may use this...</p>

<pre><code>main(string[] args){    
String forUri = String.format("mailto:?subject=%s&amp;body=%s",  urlEncode(sub), urlEncode(mailBody));
                        Desktop.getDesktop().mail(new URI(forUri));
}

private static final String urlEncode(String str) {
        try {
            return URLEncoder.encode(str, "UTF-8").replace("+", "%20");
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
</code></pre>

<p>Also for formatting read <a href="http://www.2ality.com/2010/12/simple-way-of-sending-emails-in-java.html" rel="nofollow">A simple way of sending emails in Java: mail-to links</a></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:05:37:0934, diag_detail_itementered, id=12107210, type=20
2014-10-31 07:05:38:0564, diag_detail_itemexited, id=12107210, type=20
2014-10-31 07:05:39:0524, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:39:0534, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:39:0534, diag_detail_itementered, id=27353, type=20
2014-10-31 07:05:39:0584, diag_detail_itemexited, id=27353, type=20
2014-10-31 07:05:39:0984, answer_open, VisualItem[tree.nodes,7,id=17535,type=20,title=,body=<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:05:39:0994, answer_open, VisualItem[tree.nodes,7,id=17535,type=20,title=,body=<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:05:40:0004, diag_detail_itementered, id=17535, type=20
2014-10-31 07:05:40:0424, diag_detail_itemexited, id=17535, type=20
2014-10-31 07:05:40:0584, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:05:40:0584, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:05:40:0594, diag_detail_itementered, id=17426, type=20
2014-10-31 07:05:41:0064, diag_detail_itemexited, id=17426, type=20
2014-10-31 07:05:41:0244, list_mouseentered, type=detailAnswersList
2014-10-31 07:05:42:0774, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:42:0774, list_itemclicked, type=detailAnswersList, item=32586
2014-10-31 07:05:43:0554, list_mouseexited, type=detailAnswersList
2014-10-31 07:05:44:0774, list_mouseentered, type=detailAnswersList
2014-10-31 07:05:45:0264, answer_open, VisualItem[tree.nodes,9,id=27791,type=21,title=,body=<p>In Java 1.6 you have a stardard way to open the default mailer of the platform:
<a href="http://java.sun.com/javase/6/docs/api/java/awt/Desktop.html">the Desktop.mail(URI) method</a>.The URI can be used to set all the fields of the mail (sender, recipients, body, subject).
You can check a full example of desktop integration in Java 1.6 on <a href="http://java.sun.com/developer/technicalArticles/J2SE/Desktop/javase6/desktop_api/">Using the Desktop API in Java SE 6</a></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=8]
2014-10-31 07:05:45:0264, list_itemclicked, type=detailAnswersList, item=32586
2014-10-31 07:05:45:0844, list_mouseexited, type=detailAnswersList
2014-10-31 07:05:47:0894, list_mouseentered, type=detailAnswersList
2014-10-31 07:05:48:0234, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:48:0234, list_itemclicked, type=detailAnswersList, item=32586
2014-10-31 07:05:48:0664, list_mouseexited, type=detailAnswersList
2014-10-31 07:05:49:0784, answer_open, VisualItem[tree.nodes,8,id=27353,type=20,title=,body=<p>Never use <code>Runtime.exec(String)</code> on Mac OS X or any other operating system.  If you do that, you'll have to figure out how to properly quote all argument strings and so on; it's a pain and very error-prone.</p>

<p>Instead, use <code>Runtime.exec(String[])</code> which takes an array of already-separated arguments.  This is much more appropriate for virtually all uses.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:49:0784, diag_detail_itementered, id=27353, type=20
2014-10-31 07:05:50:0515, diag_detail_itemexited, id=27353, type=20
2014-10-31 07:05:51:0415, answer_open, VisualItem[tree.nodes,7,id=17535,type=20,title=,body=<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:05:51:0425, answer_open, VisualItem[tree.nodes,7,id=17535,type=20,title=,body=<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:05:51:0425, diag_detail_itementered, id=17535, type=20
2014-10-31 07:05:51:0885, diag_detail_itemexited, id=17535, type=20
2014-10-31 07:05:52:0915, list_mouseentered, type=detailAnswersList
2014-10-31 07:05:55:0795, list_mouseexited, type=detailAnswersList
2014-10-31 07:05:56:0775, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:56:0785, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:56:0805, diag_detail_itementered, id=17398, type=20
2014-10-31 07:05:57:0485, diag_detail_itemexited, id=17398, type=20
2014-10-31 07:05:58:0135, answer_open, VisualItem[tree.nodes,4,id=17394,type=20,title=,body=<p>I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.)</p>

<pre><code>public void email(String subject, String body) throws Exception {
    String cmd = "open mailto:";        
    cmd += "?subject=" + urlEncode(subject);
    cmd += "&amp;body=" + urlEncode(body);
    Runtime.getRuntime().exec(cmd);
}

private static String urlEncode(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; s.length(); i++) {
        char ch = s.charAt(i);
        if (Character.isLetterOrDigit(ch)) {
            sb.append(ch);
        }
        else {
            sb.append(String.format("%%%02X", (int)ch));
        }
    }
    return sb.toString();
}
</code></pre>

<p>I had to re-implement URLencode because Java's would use <code>+</code> for space and Mail took those literally. Haven't tested on Windows yet.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:05:58:0145, answer_open, VisualItem[tree.nodes,4,id=17394,type=20,title=,body=<p>I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.)</p>

<pre><code>public void email(String subject, String body) throws Exception {
    String cmd = "open mailto:";        
    cmd += "?subject=" + urlEncode(subject);
    cmd += "&amp;body=" + urlEncode(body);
    Runtime.getRuntime().exec(cmd);
}

private static String urlEncode(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; s.length(); i++) {
        char ch = s.charAt(i);
        if (Character.isLetterOrDigit(ch)) {
            sb.append(ch);
        }
        else {
            sb.append(String.format("%%%02X", (int)ch));
        }
    }
    return sb.toString();
}
</code></pre>

<p>I had to re-implement URLencode because Java's would use <code>+</code> for space and Mail took those literally. Haven't tested on Windows yet.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:05:58:0155, diag_detail_itementered, id=17394, type=20
2014-10-31 07:05:59:0515, diag_detail_itemexited, id=17394, type=20
2014-10-31 07:05:59:0705, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:59:0705, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:05:59:0715, diag_detail_itementered, id=17389, type=20
2014-10-31 07:06:00:0485, diag_detail_itemexited, id=17389, type=20
2014-10-31 07:06:00:0905, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:00:0915, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:00:0925, diag_detail_itementered, id=17379, type=20
2014-10-31 07:06:03:0065, diag_detail_itemexited, id=17379, type=20
2014-10-31 07:06:03:0225, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:03:0225, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:03:0225, diag_detail_itementered, id=17379, type=20
2014-10-31 07:06:03:0265, diag_detail_itemexited, id=17379, type=20
2014-10-31 07:06:03:0415, list_mouseentered, type=detailAnswersList
2014-10-31 07:06:04:0185, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:04:0185, list_itemclicked, type=detailAnswersList, item=7720
2014-10-31 07:06:05:0195, answer_open, VisualItem[tree.nodes,4,id=17394,type=20,title=,body=<p>I have implemented this, and it works well on OS X. (Ryan's mention of the max URL length has not been codified.)</p>

<pre><code>public void email(String subject, String body) throws Exception {
    String cmd = "open mailto:";        
    cmd += "?subject=" + urlEncode(subject);
    cmd += "&amp;body=" + urlEncode(body);
    Runtime.getRuntime().exec(cmd);
}

private static String urlEncode(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; s.length(); i++) {
        char ch = s.charAt(i);
        if (Character.isLetterOrDigit(ch)) {
            sb.append(ch);
        }
        else {
            sb.append(String.format("%%%02X", (int)ch));
        }
    }
    return sb.toString();
}
</code></pre>

<p>I had to re-implement URLencode because Java's would use <code>+</code> for space and Mail took those literally. Haven't tested on Windows yet.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=0]
2014-10-31 07:06:05:0195, list_itemclicked, type=detailAnswersList, item=7720
2014-10-31 07:06:07:0415, list_mouseexited, type=detailAnswersList
2014-10-31 07:06:09:0495, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:09:0505, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:09:0505, diag_detail_itementered, id=17389, type=20
2014-10-31 07:06:10:0095, diag_detail_itemclicked, id=17389, type=20
2014-10-31 07:06:10:0445, diag_detail_itemexited, id=17389, type=20
2014-10-31 07:06:11:0815, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:11:0825, answer_open, VisualItem[tree.nodes,2,id=17379,type=20,title=,body=<p>Mailto isn't a bad route to go. But as you mentioned, you'll need to make sure it is encoded correctly. </p>

<p>The main problem with using mailto is with breaking lines. Use %0A for carriage returns, %20 for spaces.</p>

<p>Also, keep in mind that the mailto is considered the same as a URL of sorts and therefore will have the same limitations for length. See 
<a href="http://support.microsoft.com/kb/208427" rel="nofollow"><a href="http://support.microsoft.com/kb/208427" rel="nofollow">http://support.microsoft.com/kb/208427</a></a>, note the maximum URL length of 2083 characters. This is confirmed for mailto as well 
in this article: <a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow"><a href="http://support.microsoft.com/kb/279460/en-us" rel="nofollow">http://support.microsoft.com/kb/279460/en-us</a></a>. Also, some mail clients can also have a limit (I believe older versions of Outlook Express had a limit of something much smaller like 483 characters or something. If you expect to have a longer string than that then you'll need to look at alternatives.</p>

<p>BTW, you shouldn't have to resort to kicking out a script to do that as long as you can shell out a command from Java (I don't know if you can since I don't do Java).</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:11:0825, diag_detail_itementered, id=17379, type=20
2014-10-31 07:06:12:0215, diag_detail_itemclicked, id=17379, type=20
2014-10-31 07:06:13:0055, diag_detail_itemexited, id=17379, type=20
2014-10-31 07:06:13:0095, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:13:0105, answer_open, VisualItem[tree.nodes,3,id=17389,type=20,title=,body=<p><strong>1. Add a Subject Line</strong> </p>

<p>You can prefill the subject line in the email by adding the subject preceded by '<strong>?subject=</strong>' after the email address. </p>

<p>So the link now becomes: </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?subject=Mail from Our Site"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p><strong>2. Send to Multiple Recipients</strong> </p>

<p>Mail can be sent to additional recipients either as carbon copies (cc) or blind carbon copies (bcc). </p>

<p>This is done in a similar way, by placing '<strong>?cc=someoneelse@theirsite.com</strong>' after the initial address. </p>

<p>So the link looks like this:</p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com"&gt;Email Us&lt;/a&gt;
</code></pre>

<p>cc can simply be replaced by bcc if you wish to send blind carbon copies. </p>

<p>This can be very useful if you have links on pages with different subjects. You might have the email on each page go to the appropriate person in a company but with a copy of all mails sent to a central address also. </p>

<p>You can of course specify more than one additional recipient, just separate your list of recipients with a comma. </p>

<pre><code>&lt;a href="mailto:someone@yoursite.com?cc=someoneelse@theirsite.com, another@thatsite.com, me@mysite.com"&gt;Email Us&lt;/a&gt; 
</code></pre>

<p>Sourced from <a href="http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">Getting More From 'mailto'</a> which now 404s.  I retrieved the content from waybackmachine.    </p>

<p><strong>3. Combining Code</strong> </p>

<p>You can combine the various bits of code above by the addition of an '&amp;' between each.</p>

<p>Thus adding </p>

<pre><code>me@mysite.com?subject=Hello&amp;cc=you@yoursite.com&amp;bcc=her@hersite.com
</code></pre>

<p>would send an email with the subject 'Hello' to me, you and her. </p>

<p><strong>4. Write the Email</strong> </p>

<p>You can also prefill the body of the email with the start of a message, or write the whole message if you like! To add some thing to the body of the email it is again as simple as above - '<strong>?body=</strong>' after the email address. However formatting that email can be a little tricky. To create spaces between words you will have to use hex code - for example '<strong>%20</strong>' between each word, and to create new lines will mean adding '<strong>%0D</strong>'. Similarly symbols such as <strong>$</strong> signs will need to be written in hex code.</p>

<p>If you also wish to add a subject line and send copies to multiple recipients, this can make for a very long and difficult to write bit of code. </p>

<p>It will send a message to three people, with the subject and the message filled in, all you need to do is add your name. </p>

<p>Just look at the code! </p>

<pre><code>&lt;a href="mailto:abbeyvet@outfront.net?CC=spooky@outfront.net
&amp;BCC=thomasbrunt@outfront.net&amp;Subject=Please%2C%20I%20insist
%21&amp;Body=Hi%0DI%20would%20like%20to%20send%20you%20
%241000000%20to%20divide%20as%20you%20see%20fit%20among
%20yourselves%20and%20all%20the%20moderators.%0DPlease%
20let%20me%20know%20to%20whom%20I%20should%20send
%20the%20check."&gt;this link&lt;/a&gt; 
</code></pre>

<p><em>Note: Original source URL where I found this is now 404ing so I <a href="http://web.archive.org/web/20121123210358/http://www.outfront.net/tutorials_02/adv_tech/mailto.htm" rel="nofollow">grabbed to content from waybackmachine</a> and posted it here so it doesn't get lost.  Also, the OP stated it was not for a website, which is what these examples are, but some of these techniques may still be useful.</em></p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:13:0105, diag_detail_itementered, id=17389, type=20
2014-10-31 07:06:13:0145, diag_detail_itemexited, id=17389, type=20
2014-10-31 07:06:13:0275, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:13:0275, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:13:0305, diag_detail_itementered, id=17426, type=20
2014-10-31 07:06:13:0325, diag_detail_itemexited, id=17426, type=20
2014-10-31 07:06:14:0075, answer_open, VisualItem[tree.nodes,7,id=17535,type=20,title=,body=<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:14:0085, answer_open, VisualItem[tree.nodes,7,id=17535,type=20,title=,body=<blockquote>
  <p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a> shows some of the most common chars to encode:</p>
</blockquote>

<p>For percent-encoding mailto URI hnames and hvalues, I use the rules at <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#encoding</a>. Under <a href="http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations" rel="nofollow">http://shadow2531.com/opera/testcases/mailto/modern_mailto_uri_scheme.html#implementations</a>, there's a Java example that may help.</p>

<p>Basically, I use:</p>

<pre><code>private String encodex(final String s) {
    try {
        return java.net.URLEncoder.encode(s, "utf-8").replaceAll("\\+", "%20").replaceAll("\\%0A", "%0D%0A");
    } catch (Throwable x) {
        return s;
    }
}
</code></pre>

<p>The string that's passed in should be a string with \r\n, and stray \r already normalized to \n.</p>

<p>Also note that just returning the original string on an exception like above is only safe if the mailto URI argument you're passing on the command-line is properly escaped and quoted.</p>

<p>On windows that means:</p>

<ol>
<li>Quote the argument.</li>
<li>Escape any " inside the quotes with \.</li>
<li>Escape any \ that precede a " or the end of the string with \.</li>
</ol>

<p>Also, on windows, if you're dealing with UTF-16 strings like in Java, you might want to use ShellExecuteW to "open" the mailto URI. If you don't and return s on an exception (where some hvalue isn't completely percent-encoded, you could end up narrowing some wide characters and losing information. But, not all mail clients accept unicode arguments, so ideally, you want to pass a properly percent-encoded-utf8 ascii argument with ShellExecute.</p>

<p>Like 'start', ShellExecute with "open" should open the mailto URI in the default client.</p>

<p>Not sure about other OS's.</p>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=2]
2014-10-31 07:06:14:0095, diag_detail_itementered, id=17535, type=20
2014-10-31 07:06:15:0875, diag_detail_itemclicked, id=17535, type=20
2014-10-31 07:06:17:0255, diag_detail_itemexited, id=17535, type=20
2014-10-31 07:06:18:0445, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:18:0445, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:18:0445, diag_detail_itementered, id=17426, type=20
2014-10-31 07:06:19:0015, diag_detail_itemclicked, id=17426, type=20
2014-10-31 07:06:19:0275, diag_detail_itemexited, id=17426, type=20
2014-10-31 07:06:19:0585, list_mouseentered, type=detailAnswersList
2014-10-31 07:06:21:0796, list_mouseexited, type=detailAnswersList
2014-10-31 07:06:21:0916, list_mouseentered, type=detailAnswersList
2014-10-31 07:06:21:0926, list_mouseexited, type=detailAnswersList
2014-10-31 07:06:22:0096, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:22:0106, answer_open, VisualItem[tree.nodes,5,id=17398,type=20,title=,body=<blockquote>
  <p>I had to re-implement URLencode
  because Java's would use + for space
  and Mail took those literally.</p>
</blockquote>

<p>I don't know if Java has some built-in method for urlencoding the string, but this link <a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow"><a href="http://www.permadi.com/tutorial/urlEncoding/" rel="nofollow">http://www.permadi.com/tutorial/urlEncoding/</a></a> shows some of the most common chars to encode:</p>

<pre><code>;       %3B
?       %3F
/       %2F
:       %3A
#       %23
&amp;       %24
=       %3D
+       %2B
$       %26
,       %2C
space   %20 or +
%       %25
&lt;       %3C
&gt;       %3E
~       %7E
%       %25
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=3]
2014-10-31 07:06:22:0106, diag_detail_itementered, id=17398, type=20
2014-10-31 07:06:22:0156, diag_detail_itemexited, id=17398, type=20
2014-10-31 07:06:22:0206, diag_detail_itementered, id=0.7548637342354395, type=4
2014-10-31 07:06:22:0216, diag_detail_itemexited, id=0.7548637342354395, type=4
2014-10-31 07:06:22:0226, diag_detail_itementered, id=0.2327271686866894, type=4
2014-10-31 07:06:22:0246, diag_detail_itemexited, id=0.2327271686866894, type=4
2014-10-31 07:06:22:0416, diag_detail_itementered, id=0.2327271686866894, type=4
2014-10-31 07:06:22:0436, diag_detail_itemexited, id=0.2327271686866894, type=4
2014-10-31 07:06:22:0456, diag_detail_itementered, id=0.7548637342354395, type=4
2014-10-31 07:06:22:0466, diag_detail_itemexited, id=0.7548637342354395, type=4
2014-10-31 07:06:22:0486, diag_detail_itementered, id=0.8911755978566817, type=4
2014-10-31 07:06:22:0506, diag_detail_itemexited, id=0.8911755978566817, type=4
2014-10-31 07:06:22:0566, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:22:0566, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:22:0566, diag_detail_itementered, id=17426, type=20
2014-10-31 07:06:23:0256, diag_detail_itemexited, id=17426, type=20
2014-10-31 07:06:23:0396, list_mouseentered, type=detailAnswersList
2014-10-31 07:06:24:0056, answer_open, VisualItem[tree.nodes,6,id=17426,type=20,title=,body=<p><code>start</code> works fine in Windows (see below). I would use Java's built in UrlEscape then just run a second replacement for '+' characters.</p>

<pre><code>start mailto:"?subject=My%20Subject&amp;body=The%20Body"
</code></pre>
,solution=,x=0.0,y=0.0,viewcount=0,answercount=0,acceptedanswerid=-1,owner=Anonymous,lasteditdate=1414753511070L,lastactivitydate=0L,tags=,score=4]
2014-10-31 07:06:24:0056, list_itemclicked, type=detailAnswersList, item=17645
2014-10-31 07:06:25:0396, list_mouseexited, type=detailAnswersList
